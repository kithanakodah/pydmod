/*
 * Created by Candy on 14-8-11.
 */
var iconv = require('iconv-lite');
var bufext =module.exports;
bufext.SINGLE_LENGTH=4;
bufext.DOUBLE_LENGTH=8;
bufext.LONGWORD_LENGTH=4;
bufext.SHORTTIME_LENGTH=4;
bufext.SHORTDATE_LENGTH=4;
bufext.SHORTDATETIME_LENGTH=4;
bufext.LONGDATETIME_LENGTH=8;
bufext.LONGTIME_LENGTH=8;
bufext.LONGDATE_LENGTH=8;
bufext.BYTE_LENGTH=1;
bufext.WORD_LENGTH= 2;
bufext.INTEGER_LENGTH=4;

//default change to big5
bufext.DEFAULT_ENCODING ='big5';

function mytrim(str){
    return str.replace(/\0+/,'').trim();
}

bufext.worddata_length=function worddata_length(data){
    return data.length +2;
}
bufext.bytedata_length=function worddata_length(data){
    return data.length +1;
}
bufext.wordstring_length=function worddata_length(data){
    return data.length +2;
}
bufext.bytestring_length=function worddata_length(data){
    return data.length +1;
}

function defineposition(buf){
    if (buf.position ==undefined)
    {
        buf.position=0;
    }
}

bufext.write_byte=function (buf,aByte){
    defineposition(buf);
    buf.writeUInt8(aByte,buf.position);
    buf.position +=bufext.BYTE_LENGTH;
};

bufext.read_byte=function (buf){
    defineposition(buf);
    var aByte = buf.readUInt8(buf.position);
    buf.position +=bufext.BYTE_LENGTH;
    return aByte;
};
bufext.write_word=function(buf,aWord){
    defineposition(buf);
    buf.writeUInt16LE(aWord,buf.position);
    buf.position +=bufext.WORD_LENGTH;
};

bufext.read_word=function(buf){
    defineposition(buf);
    var aWord = buf.readUInt16LE(buf.position);
    buf.position +=bufext.WORD_LENGTH;
    return aWord;
};
bufext.write_wordbe=function(buf,aWord){
    defineposition(buf);
    buf.writeUInt16BE(aWord,buf.position);
    buf.position +=bufext.WORD_LENGTH;
};
bufext.read_wordbe=function(buf){
    defineposition(buf);
    var aWord = buf.readUInt16BE(buf.position);
    buf.position +=bufext.WORD_LENGTH;
    return aWord;
};
bufext.write_bytex=function(buf ,data,len){
    defineposition(buf);
    for(var i=0;i<len;i++){
        if (i<data.length){
            buf[buf.position+i]=data[i];
        }else {
            buf[buf.position+i]=0;
        }
    //this._buf.write(data,this.position,data.length);
    }
    buf.position +=len;
}
bufext.read_bytex=function(buf,len){
    defineposition(buf);
    var arr =new Array();//to do :be a new class
    for(var i=buf.position;i<buf.position +len;i++){
        arr.push(buf[i]);
    }
    buf.position +=len;
    return arr;
};
bufext.write_bytedata=function(buf,data){
    defineposition(buf);
    bufext.write_byte(buf,data.length);
    buf.write(data,buf.position,data.length);
    buf.position+=data.length;
}

bufext.read_bytedata=function(buf){
    defineposition(buf);
    var len =this.read_byte(buf);
    var s =buf.toString('utf8',buf.position,buf.position +len);
    this.position +=len;
    return s;
}
bufext.write_worddata=function(buf,data){
    defineposition(buf);
    bufext.write_word(buf,data.length);
    buf.write(data,buf.position,data.length);
    buf.position+=data.length;
}

bufext.read_worddata=function(buf){
    defineposition(buf);
    var len =bufext.read_word(buf);
    var s =buf.toString('utf8',buf.position,buf.position +len);
    buf.position +=len;
    return s;
}
bufext.write_wordstring=function(buf,data){
    defineposition(buf);
    bufext.write_worddata(buf,data);
}
bufext.read_wordstring=function(buf){
    defineposition(buf);
    return bufext.read_worddata(buf);
}
bufext.write_bytestring=function(buf,data){
    defineposition(buf);
    bufext.write_bytedata(buf,data);
}
bufext.read_bytestring=function(buf){
    defineposition(buf);
//  return this.read_bytedata();
    var len =bufext.read_byte(buf);
    var buf=buf.slice(buf.position,buf.position+len);
    var s=iconv.decode(buf, bufext.DEFAULT_ENCODING);
    buf.position +=len;
    return s;
}
bufext.write_byteboolean=function(buf,data){
    defineposition(buf);
    var tmp =0;
    if (data ===true){
        tmp =1;
    }
    bufext.write_byte(buf,tmp);
}
bufext.read_byteboolean=function(buf,data){
    defineposition(buf);
    var tmp =bufext.read_byte(buf);
    if (tmp===1)
    {return true;}
    else
    { return false;}
}

bufext.write_charx=function(buf,data,len){
    defineposition(buf);

    buf.write(data,buf.position,Math.min(data.length,len));
    //补零，不够长
    for (var i=data.length;i<len;i++){
        buf[buf.position+i]=0;
    }
    buf.position+=len;
}
bufext.read_charx=function(buf,len){
    defineposition(buf);
    var s =buf.toString('utf8',buf.position,buf.position +len);
    buf.position+=len;
    return mytrim(s);

}

bufext.write_integer=function(buf,aint){
    defineposition(buf);
    buf.writeInt32LE(aint,buf.position);
    buf.position+=bufext.INTEGER_LENGTH;
}
bufext.read_integer=function(buf){
    defineposition(buf);
    var  tmp =buf.readInt32LE(buf.position);
    buf.position+=bufext.INTEGER_LENGTH;
    return tmp;
}
bufext.write_single=function(buf,asingle){
    defineposition(buf);
   buf.writeFloatLE(asingle,buf.position);
    buf.position+=bufext.SINGLE_LENGTH;
}
bufext.read_single=function(buf){
    defineposition(buf);
    var  tmp =buf.readFloatLE(buf.position);
    buf.position+=bufext.SINGLE_LENGTH;
    return tmp;
}
bufext.write_double=function(buf,adouble){
    defineposition(buf);
    buf.writeDoubleLE(adouble,buf.position);
    buf.position+=bufext.DOUBLE_LENGTH;
}
bufext.read_double=function(buf){
    defineposition(buf);
    var  tmp =buf.readDoubleLE(this.position);
    buf.position+=bufext.DOUBLE_LENGTH;
    return tmp;
}

bufext.write_longword=function(buf,alword){
    defineposition(buf);
    buf.writeUInt32BE(alword,buf.position);
    buf.position+=bufext.LONGWORD_LENGTH;
}
bufext.read_longword=function(buf){
    defineposition(buf);
    var  tmp =buf.readUInt32BE(buf.position);
    buf.position+=bufext.LONGWORD_LENGTH;
    return tmp;
}

bufext.write_longdatetime=function(buf,adatetime){
    bufext.write_double(buf,adatetime);
}
bufext.read_longdatetime=function(buf){
    return bufext.read_double(buf);
}

bufext.getposition=function(buf){
    defineposition(buf);
    return buf.position;
}